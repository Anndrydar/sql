--UN TRIGGER QUE VERIFICA LA CANTIDAD DE OPERACIONES DE UN 
--DRON ASI COMO EL NUMERO DE HORAS Y ACTUALIZA EL ESTADO 
--DEL MISMO A REGULAR CUANDO YA NO SE ENCUENTRA EN OPTIMAS CONDICIONES

--creación de funcion del proceso logico que retorna un trigger
CREATE OR REPLACE FUNCTION TG_ESTADODRON() RETURNS TRIGGER
AS
$TG_ESTADODRON$
	DECLARE
		NUM_HORAS INT;
		NUM_OPERACION INT;
		MAXIMO_HORAS INT := 10;
		MAXIMO_OPERACION INT := 3;
	BEGIN
		SELECT COUNT(*) INTO NUM_OPERACION 
		FROM HORARIO_VUELO_DRONE 
		WHERE ID_DRON = new.id_dron;
		SELECT SUM(TO_CHAR(HORA_FIN, 'HH24')::int-TO_CHAR(HORA_INICIO, 'HH24')::int) INTO NUM_HORAS 
		FROM HORARIO_VUELO_DRONE
		WHERE ID_DRON = new.id_dron;
		IF(NUM_HORAS >= MAXIMO_HORAS OR NUM_OPERACION >= MAXIMO_OPERACION) THEN
			UPDATE DRONE SET ESTADO = 'REGULAR' WHERE ID_DRON= new.id_dron;
		END IF;
		RETURN NEW;
	END;
	$TG_ESTADODRON$
	LANGUAGE PLPGSQL;


--creación del trigger
CREATE TRIGGER TG_ESTADODRON
BEFORE
INSERT ON HORARIO_VUELO_DRONE
FOR EACH ROW
EXECUTE PROCEDURE TG_ESTADODRON();

--datos de prueba para verificar la validez del trigger
INSERT INTO HORARIO_VUELO_DRONE VALUES (7, 3, '09:00:00', '16:00:00', 'Matutino', '2022/03/05');
INSERT INTO HORARIO_VUELO_DRONE VALUES (8, 3, '09:00:00', '13:00:00', 'Matutino', '2022/03/05');
select tdr.nombre_drone as tipo, d.UTE_10 as nombre_drone, d.estado from drone d
inner join tipo_drone tdr on tdr.id_tipo_drone = d.id_tipo_drone
